permissions:
  contents: read
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/*.md'
      - 'docs/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/*.md'
      - 'docs/**'
  workflow_dispatch: # Allow manual triggering

# Environment variables used across jobs
env:
  NODE_VERSION: '21'
  FIREBASE_PROJECT_ID: elmo-d723d

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint || true # Don't fail build, just report

      - name: Check code formatting
        run: npx prettier --check "src/**/*.{ts,tsx}" || true # Don't fail build, just report

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Scan for vulnerabilities
        run: npm audit --production
        continue-on-error: true

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Build frontend
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Run tests
        run: npm test
        env:
          CI: true
          
      - name: Build Firebase Functions
        run: |
          cd functions
          npm ci
          npm run build
        
      - name: Test Firebase Functions
        run: |
          cd functions
          npm test || echo "No tests in functions directory"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .next
            out
            functions/lib
          retention-days: 1

  deploy-preview:
    name: Deploy Preview
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    environment: preview
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output

      - name: Deploy to Firebase Hosting Preview
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_ELMO_D723D }}'
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          expires: 7d
        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels

      - name: Comment on PR with preview URL
        uses: actions/github-script@v6
        with:
          script: |
            const deployOutput = process.env.FIREBASE_DEPLOY_OUTPUT || '';
            const urlMatch = deployOutput.match(/Preview URL: (https:\/\/[^\s]+)/);
            if (urlMatch) {
              const previewUrl = urlMatch[1];
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚úÖ Preview deployment is ready! Visit: ${previewUrl}`
              });
            }

  deploy-production:
    name: Deploy to Production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    environment: production
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output

      - name: Deploy to Firebase Hosting and Functions
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_ELMO_D723D }}'
          channelId: live
          projectId: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Deploy Firestore Rules and Indexes
        run: |
          npm install -g firebase-tools
          firebase deploy --only firestore:rules,firestore:indexes --project ${{ env.FIREBASE_PROJECT_ID }} --token "${{ secrets.FIREBASE_TOKEN }}"
        
      - name: Deploy Storage Rules
        run: |
          firebase deploy --only storage --project ${{ env.FIREBASE_PROJECT_ID }} --token "${{ secrets.FIREBASE_TOKEN }}"

      - name: Create Release Tag
        id: create_tag
        run: |
          TAG_NAME="release-$(date +'%Y%m%d%H%M%S')"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Deployment Status
    permissions:
      issues: write
      contents: read
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Check Deployment Status
        uses: actions/github-script@v6
        with:
          script: |
            const result = ${{ needs.deploy-production.result == 'success' }};
            const message = result 
              ? 'üöÄ Successfully deployed to production!' 
              : '‚ùå Production deployment failed!';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
        continue-on-error: true
