rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---- Helpers ----
    function authed() { return request.auth != null; }
    function isSuperAdmin() { return authed() && request.auth.token.superAdmin == true; }
    function isOfficer(clubId) {
      return authed() && request.auth.token.officerOfClub[clubId] == true;
    }
    function isSelf(uid) { return authed() && request.auth.uid == uid; }

    // ---- USERS ----
    match /users/{uid} {
      allow read: if authed();
      allow create: if isSelf(uid);
      // Allow only user-editable fields to change
      allow update: if isSelf(uid) &&
        request.resource.data.diff(resource.data).changedKeys()
          .hasOnly([
            'displayName','photoURL','timezone','preferredLanguage',
            'contact','visibility','handles','interests','consents'
          ]);
      allow delete: if false;
    }

    // ---- CLUBS ----
    match /clubs/{clubId} {
      allow read: if authed() && resource.data.isApproved == true;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() || isOfficer(clubId);
      allow delete: if isSuperAdmin();
    }

    // ---- MEMBERSHIPS (recommended) ----
    match /memberships/{mid} {
      allow read: if authed();
      // user can create own pending membership (join request)
      allow create: if authed() && request.resource.data.userId == request.auth.uid;
      // updates by super admin, club officer, or the member themselves (limited)
      allow update: if authed() && (
        isSuperAdmin() ||
        isOfficer(resource.data.clubId) ||
        (request.auth.uid == resource.data.userId &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['status']) &&
          request.resource.data.status in ['canceled','archived'])
      );
      allow delete: if false;
    }

    // ---- EVENTS ----
    match /events/{eventId} {
      // Visibility: public OR campus (any overlap) OR member/officer/admin
      allow read: if authed() && (
        resource.data.visibility == 'public' ||
        (
          resource.data.visibility == 'campus' &&
          get(/databases/$(database)/documents/users/$(request.auth.uid))
            .data.universityIds.hasAny(resource.data.allowedUniversities)
        ) ||
        isOfficer(resource.data.clubId) || isSuperAdmin()
      );

      allow create: if authed() && isOfficer(request.resource.data.clubId);
      allow update: if isSuperAdmin() || isOfficer(resource.data.clubId);
      allow delete: if isSuperAdmin() || isOfficer(resource.data.clubId);
    }

    // ---- RSVPS ----
    match /rsvps/{rid} {
      allow read: if authed();
      allow create: if authed() && request.resource.data.userId == request.auth.uid;
      // user can cancel own RSVP only
      allow update: if authed() &&
        request.auth.uid == resource.data.userId &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['status']);
      allow delete: if false;
    }

    // ---- ORDERS (external payments) ----
    match /orders/{oid} {
      allow read: if authed() && (
        request.auth.uid == resource.data.userId || isSuperAdmin() ||
        // Officer of the event's club can read
        isOfficer(get(/databases/$(database)/documents/events/$(resource.data.eventId)).data.clubId)
      );

      // user can create only for self
      allow create: if authed() && request.resource.data.userId == request.auth.uid;

      // user: attach receipt + set pending_review; officer/admin: set paid/rejected
      allow update: if authed() && (
        (
          request.auth.uid == resource.data.userId &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['receiptUrl','reference','status']) &&
          request.resource.data.status == 'pending_review'
        ) ||
        isSuperAdmin() ||
        isOfficer(get(/databases/$(database)/documents/events/$(resource.data.eventId)).data.clubId)
      );

      allow delete: if false;
    }

    // ---- TICKETS ----
    match /tickets/{tid} {
      allow read: if authed() && (
        request.auth.uid == resource.data.userId || isSuperAdmin()
      );
      allow create, update, delete: if false; // admin SDK/CF only
    }

    // ---- CLUB FILES (metadata) ----
    match /clubFiles/{fid} {
      allow read: if authed();
      allow create, update: if isSuperAdmin() ||
        isOfficer(request.resource.data.clubId);
      allow delete: if isSuperAdmin() || isOfficer(resource.data.clubId);
    }

    // ---- FEEDBACK ----
    match /feedback/{feedbackId} {
      allow read: if authed();
      allow create: if authed() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSuperAdmin();
    }

    // ---- PROPOSALS ----
    match /proposals/{proposalId} {
      allow read: if authed();
      allow create: if authed() && isOfficer(request.resource.data.clubId);
      allow update: if isSuperAdmin() || isOfficer(resource.data.clubId);
      allow delete: if isSuperAdmin();
    }

    // ---- COMMENTS ----
    match /comments/{commentId} {
      allow read: if authed();
      allow create: if authed() && request.resource.data.userId == request.auth.uid;
      allow update: if authed() && (
        isSuperAdmin() ||
        (request.auth.uid == resource.data.userId &&
         request.resource.data.diff(resource.data).changedKeys().hasOnly(['content', 'updatedAt']))
      );
      allow delete: if authed() && (
        isSuperAdmin() || request.auth.uid == resource.data.userId
      );
    }

    // ---- ACTIVITY LOG ----
    match /activity-log/{logId} {
      allow read: if authed() && (
        isSuperAdmin() || 
        request.auth.uid == resource.data.userId ||
        isOfficer(resource.data.clubId)
      );
      allow create, update, delete: if false; // Admin SDK only
    }

    // ---- POLICIES ----
    match /policies/{policyId} {
      allow read: if authed();
      allow create, update, delete: if isSuperAdmin();
    }

    // ---- POLICY ACCEPTANCES ----
    match /policy-acceptances/{acceptanceId} {
      allow read: if authed() && (
        isSuperAdmin() || request.auth.uid == resource.data.userId
      );
      allow create: if authed() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // ---- FILES ----
    match /files/{fileId} {
      allow read: if authed();
      allow create, update: if authed();
      allow delete: if authed() && (
        isSuperAdmin() || request.auth.uid == resource.data.uploadedBy
      );
    }

    // ---- ANNOUNCEMENTS ----
    match /announcements/{announcementId} {
      allow read: if authed();
      allow create: if authed() && isOfficer(request.resource.data.clubId);
      allow update: if isSuperAdmin() || isOfficer(resource.data.clubId);
      allow delete: if isSuperAdmin() || isOfficer(resource.data.clubId);
    }
  }
}
